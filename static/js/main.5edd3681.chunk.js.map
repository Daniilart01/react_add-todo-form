{"version":3,"sources":["api/users.ts","api/todos.ts","services/findUserById.ts","components/UserInfo/UserInfo.tsx","components/TodoInfo/TodoInfo.tsx","components/TodoList/TodoList.tsx","App.tsx","services/getNextTodoId.ts","index.tsx"],"names":["id","name","username","email","title","completed","userId","findUserById","usersFromServer","find","user","UserInfo","className","href","TodoInfo","todo","classNames","TodoList","todos","map","App","useState","emptyTitleFieldError","setEmptyTitleFieldError","emptyUserFieldError","setEmptyUserFieldError","todosFromServer","todosList","setTodosList","formData","setFormData","action","method","onSubmit","event","preventDefault","trim","Math","max","target","reset","handleFormSubmit","htmlFor","placeholder","onInput","currentTarget","value","handleTitleChange","type","onKeyDown","test","key","defaultValue","onChange","handleUserChange","disabled","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.5edd3681.chunk.js","sourcesContent":["export default [\n  {\n    id: 1,\n    name: 'Leanne Graham',\n    username: 'Bret',\n    email: 'Sincere@april.biz',\n  },\n  {\n    id: 2,\n    name: 'Ervin Howell',\n    username: 'Antonette',\n    email: 'Shanna@melissa.tv',\n  },\n  {\n    id: 3,\n    name: 'Clementine Bauch',\n    username: 'Samantha',\n    email: 'Nathan@yesenia.net',\n  },\n  {\n    id: 4,\n    name: 'Patricia Lebsack',\n    username: 'Karianne',\n    email: 'Julianne.OConner@kory.org',\n  },\n  {\n    id: 5,\n    name: 'Chelsey Dietrich',\n    username: 'Kamren',\n    email: 'Lucio_Hettinger@annie.ca',\n  },\n  {\n    id: 6,\n    name: 'Mrs. Dennis Schulist',\n    username: 'Leopoldo_Corkery',\n    email: 'Karley_Dach@jasper.info',\n  },\n  {\n    id: 7,\n    name: 'Kurtis Weissnat',\n    username: 'Elwyn.Skiles',\n    email: 'Telly.Hoeger@billy.biz',\n  },\n  {\n    id: 8,\n    name: 'Nicholas Runolfsdottir V',\n    username: 'Maxime_Nienow',\n    email: 'Sherwood@rosamond.me',\n  },\n  {\n    id: 9,\n    name: 'Glenna Reichert',\n    username: 'Delphine',\n    email: 'Chaim_McDermott@dana.io',\n  },\n  {\n    id: 10,\n    name: 'Clementina DuBuque',\n    username: 'Moriah.Stanton',\n    email: 'Rey.Padberg@karina.biz',\n  },\n];\n","export default [\n  {\n    id: 1,\n    title: 'delectus aut autem',\n    completed: true,\n    userId: 1,\n  },\n  {\n    id: 15,\n    title: 'some other todo',\n    completed: false,\n    userId: 1,\n  },\n  {\n    id: 2,\n    title: 'quis ut nam facilis et officia qui',\n    completed: false,\n    userId: 4,\n  },\n];\n","import usersFromServer from '../api/users';\nimport { User } from '../types/user';\n\nexport const findUserById = (id: number): User => (\n  usersFromServer.find(user => user.id === id) as User\n);\n","import { User } from '../../types/user';\n\ntype Props = {\n  user: User\n};\n\nexport const UserInfo: React.FC<Props> = ({ user }) => {\n  return (\n    <a className=\"UserInfo\" href={`mailto:${user.email}`}>\n      {user.name}\n    </a>\n  );\n};\n","import classNames from 'classnames';\nimport { findUserById } from '../../services/findUserById';\nimport { Todo } from '../../types/todo';\nimport { UserInfo } from '../UserInfo';\n\ntype Props = {\n  todo: Todo;\n};\n\nexport const TodoInfo: React.FC<Props> = ({ todo }) => {\n  return (\n    <article\n      data-id={todo.id}\n      className={classNames('TodoInfo', {\n        'TodoInfo--completed': todo.completed,\n      })}\n    >\n      <h2 className=\"TodoInfo__title\">\n        {todo.title}\n      </h2>\n      <UserInfo user={findUserById(todo.userId)} />\n    </article>\n  );\n};\n","import { Todo } from '../../types/todo';\nimport { TodoInfo } from '../TodoInfo';\n\ntype Props = {\n  todos: Todo[]\n};\n\nexport const TodoList: React.FC<Props> = ({ todos }) => {\n  return (\n    <section className=\"TodoList\">\n      {todos.map(todo => (\n        <TodoInfo\n          todo={todo}\n          key={todo.id}\n        />\n      ))}\n    </section>\n  );\n};\n","import './App.scss';\n\nimport { useState } from 'react';\nimport usersFromServer from './api/users';\nimport todosFromServer from './api/todos';\nimport { TodoList } from './components/TodoList';\nimport { User } from './types/user';\nimport { findUserById } from './services/findUserById';\nimport { getNextTodoId } from './services/getNextTodoId';\n\nexport const App = () => {\n  const [emptyTitleFieldError, setEmptyTitleFieldError] = useState(false);\n  const [emptyUserFieldError, setEmptyUserFieldError] = useState(false);\n  const [todosList, setTodosList] = useState(todosFromServer);\n\n  const [formData, setFormData]\n    = useState<{ title: string, user: User | null }>({ title: '', user: null });\n\n  const handleFormSubmit = (event: React.FormEvent<HTMLFormElement>) => {\n    event.preventDefault();\n\n    setEmptyTitleFieldError(!formData.title.trim());\n    setEmptyUserFieldError(!formData.user);\n\n    if (!formData.title || !formData.user) {\n      return;\n    }\n\n    setTodosList([...todosList, {\n      id: getNextTodoId(todosList),\n      title: formData.title.trim(),\n      completed: false,\n      userId: formData.user.id,\n    }]);\n\n    const form = event.target as HTMLFormElement;\n\n    form.reset();\n\n    setFormData(({ title: '', user: null }));\n  };\n\n  const keyCheck = (event: React.KeyboardEvent) => {\n    if (!/^[A-Za-zА-Яа-яЁёіїєґҐґ ]*$/\n      .test(event.key)) {\n      event.preventDefault();\n    }\n  };\n\n  const handleUserChange = (event: React.ChangeEvent<HTMLSelectElement>) => {\n    setFormData({\n      title: formData.title,\n      user: findUserById(+event.currentTarget.value),\n    });\n\n    setEmptyUserFieldError(false);\n  };\n\n  const handleTitleChange = (event: React.FormEvent<HTMLInputElement>) => {\n    setFormData({\n      title: event.currentTarget.value,\n      user: formData.user,\n    });\n\n    setEmptyTitleFieldError(false);\n  };\n\n  return (\n    <div className=\"App\">\n      <h1>Add todo form</h1>\n\n      <form\n        action=\"/api/todos\"\n        method=\"POST\"\n        onSubmit={event => handleFormSubmit(event)}\n      >\n        <div className=\"field\">\n          <label htmlFor=\"title\">Title: </label>\n          <input\n            placeholder=\"Enter a title\"\n            id=\"title\"\n            onInput={event => handleTitleChange(event)}\n            type=\"text\"\n            data-cy=\"titleInput\"\n            onKeyDown={keyCheck}\n          />\n          {emptyTitleFieldError\n            && (<span className=\"error\">Please enter a title</span>)}\n        </div>\n\n        <div className=\"field\">\n          <label htmlFor=\"user\">User: </label>\n          <select\n            id=\"user\"\n            data-cy=\"userSelect\"\n            defaultValue={0}\n            onChange={event => handleUserChange(event)}\n          >\n            <option value=\"0\" disabled>Choose a user</option>\n            {usersFromServer.map(user => (\n              <option\n                value={user.id}\n                key={user.id}\n              >\n                {user.name}\n              </option>\n            ))}\n          </select>\n          {emptyUserFieldError\n            && (<span className=\"error\">Please choose a user</span>)}\n        </div>\n\n        <button type=\"submit\" data-cy=\"submitButton\">\n          Add\n        </button>\n      </form>\n      <TodoList todos={todosList} />\n    </div>\n  );\n};\n","import { Todo } from '../types/todo';\n\nexport const getNextTodoId = (todos: Todo[]) => {\n  return Math.max(...todos.map(todo => todo.id)) + 1;\n};\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}